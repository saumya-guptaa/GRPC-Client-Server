# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import total_pb2 as total__pb2


class serviceguideStub(object):
    """///////////////////////////////////////

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Getservice = channel.unary_unary(
                '/total.serviceguide/Getservice',
                request_serializer=total__pb2.service_name.SerializeToString,
                response_deserializer=total__pb2.service_add.FromString,
                )


class serviceguideServicer(object):
    """///////////////////////////////////////

    """

    def Getservice(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_serviceguideServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Getservice': grpc.unary_unary_rpc_method_handler(
                    servicer.Getservice,
                    request_deserializer=total__pb2.service_name.FromString,
                    response_serializer=total__pb2.service_add.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'total.serviceguide', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class serviceguide(object):
    """///////////////////////////////////////

    """

    @staticmethod
    def Getservice(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/total.serviceguide/Getservice',
            total__pb2.service_name.SerializeToString,
            total__pb2.service_add.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)


class GreeterStub(object):
    """//////////////////////////////////////

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SayHello = channel.unary_unary(
                '/total.Greeter/SayHello',
                request_serializer=total__pb2.HelloRequest.SerializeToString,
                response_deserializer=total__pb2.HelloReply.FromString,
                )
        self.SayHelloAgain = channel.unary_unary(
                '/total.Greeter/SayHelloAgain',
                request_serializer=total__pb2.HelloRequest.SerializeToString,
                response_deserializer=total__pb2.HelloReply.FromString,
                )


class GreeterServicer(object):
    """//////////////////////////////////////

    """

    def SayHello(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SayHelloAgain(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_GreeterServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SayHello': grpc.unary_unary_rpc_method_handler(
                    servicer.SayHello,
                    request_deserializer=total__pb2.HelloRequest.FromString,
                    response_serializer=total__pb2.HelloReply.SerializeToString,
            ),
            'SayHelloAgain': grpc.unary_unary_rpc_method_handler(
                    servicer.SayHelloAgain,
                    request_deserializer=total__pb2.HelloRequest.FromString,
                    response_serializer=total__pb2.HelloReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'total.Greeter', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Greeter(object):
    """//////////////////////////////////////

    """

    @staticmethod
    def SayHello(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/total.Greeter/SayHello',
            total__pb2.HelloRequest.SerializeToString,
            total__pb2.HelloReply.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SayHelloAgain(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/total.Greeter/SayHelloAgain',
            total__pb2.HelloRequest.SerializeToString,
            total__pb2.HelloReply.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)


class CalculatorStub(object):
    """////////////////////////////////////////

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Add = channel.unary_unary(
                '/total.Calculator/Add',
                request_serializer=total__pb2.AddRequest.SerializeToString,
                response_deserializer=total__pb2.AddReply.FromString,
                )
        self.Substract = channel.unary_unary(
                '/total.Calculator/Substract',
                request_serializer=total__pb2.SubstractRequest.SerializeToString,
                response_deserializer=total__pb2.SubstractReply.FromString,
                )
        self.Multiply = channel.unary_unary(
                '/total.Calculator/Multiply',
                request_serializer=total__pb2.MultiplyRequest.SerializeToString,
                response_deserializer=total__pb2.MultiplyReply.FromString,
                )
        self.Divide = channel.unary_unary(
                '/total.Calculator/Divide',
                request_serializer=total__pb2.DivideRequest.SerializeToString,
                response_deserializer=total__pb2.DivideReply.FromString,
                )


class CalculatorServicer(object):
    """////////////////////////////////////////

    """

    def Add(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Substract(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Multiply(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Divide(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CalculatorServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Add': grpc.unary_unary_rpc_method_handler(
                    servicer.Add,
                    request_deserializer=total__pb2.AddRequest.FromString,
                    response_serializer=total__pb2.AddReply.SerializeToString,
            ),
            'Substract': grpc.unary_unary_rpc_method_handler(
                    servicer.Substract,
                    request_deserializer=total__pb2.SubstractRequest.FromString,
                    response_serializer=total__pb2.SubstractReply.SerializeToString,
            ),
            'Multiply': grpc.unary_unary_rpc_method_handler(
                    servicer.Multiply,
                    request_deserializer=total__pb2.MultiplyRequest.FromString,
                    response_serializer=total__pb2.MultiplyReply.SerializeToString,
            ),
            'Divide': grpc.unary_unary_rpc_method_handler(
                    servicer.Divide,
                    request_deserializer=total__pb2.DivideRequest.FromString,
                    response_serializer=total__pb2.DivideReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'total.Calculator', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Calculator(object):
    """////////////////////////////////////////

    """

    @staticmethod
    def Add(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/total.Calculator/Add',
            total__pb2.AddRequest.SerializeToString,
            total__pb2.AddReply.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Substract(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/total.Calculator/Substract',
            total__pb2.SubstractRequest.SerializeToString,
            total__pb2.SubstractReply.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Multiply(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/total.Calculator/Multiply',
            total__pb2.MultiplyRequest.SerializeToString,
            total__pb2.MultiplyReply.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Divide(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/total.Calculator/Divide',
            total__pb2.DivideRequest.SerializeToString,
            total__pb2.DivideReply.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)


class TranslatorStub(object):
    """Missing associated documentation comment in .proto file"""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GoogTrans = channel.unary_unary(
                '/total.Translator/GoogTrans',
                request_serializer=total__pb2.Text.SerializeToString,
                response_deserializer=total__pb2.returntext.FromString,
                )


class TranslatorServicer(object):
    """Missing associated documentation comment in .proto file"""

    def GoogTrans(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TranslatorServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GoogTrans': grpc.unary_unary_rpc_method_handler(
                    servicer.GoogTrans,
                    request_deserializer=total__pb2.Text.FromString,
                    response_serializer=total__pb2.returntext.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'total.Translator', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Translator(object):
    """Missing associated documentation comment in .proto file"""

    @staticmethod
    def GoogTrans(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/total.Translator/GoogTrans',
            total__pb2.Text.SerializeToString,
            total__pb2.returntext.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)
